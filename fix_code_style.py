#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ –∫–æ–¥–µ.
"""

import os
import re
import sys
from pathlib import Path


def add_newline_at_end(file_path):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        if content and not content.endswith('\n'):
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content + '\n')
            print(f"‚úì –î–æ–±–∞–≤–ª–µ–Ω –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ: {file_path}")
            return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}")
    return False


def remove_trailing_whitespace(file_path):
    """–£–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        modified = False
        for i, line in enumerate(lines):
            if line.rstrip() != line:
                lines[i] = line.rstrip() + '\n'
                modified = True
        
        if modified:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.writelines(lines)
            print(f"‚úì –£–¥–∞–ª–µ–Ω—ã –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã: {file_path}")
            return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}")
    return False


def fix_long_lines(file_path, max_length=120):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        lines = content.split('\n')
        modified = False
        
        for i, line in enumerate(lines):
            if len(line) > max_length:
                # –ü—Ä–æ—Å—Ç—ã–µ —Å–ª—É—á–∞–∏ —Ä–∞–∑–±–∏–µ–Ω–∏—è —Å—Ç—Ä–æ–∫
                if 'f"' in line and line.count('f"') == 1:
                    # –†–∞–∑–±–∏–µ–Ω–∏–µ f-—Å—Ç—Ä–æ–∫
                    match = re.search(r'f"([^"]*)"', line)
                    if match:
                        f_string_content = match.group(1)
                        if len(f_string_content) > 50:
                            # –†–∞–∑–±–∏–≤–∞–µ–º f-—Å—Ç—Ä–æ–∫—É
                            parts = f_string_content.split('. ')
                            if len(parts) > 1:
                                new_line = line.replace(
                                    f'f"{f_string_content}"',
                                    f'f"{parts[0]}. " f"{". ".join(parts[1:])}"'
                                )
                                lines[i] = new_line
                                modified = True
                
                elif 'logger.' in line and len(line) > max_length:
                    # –†–∞–∑–±–∏–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä —Å—Ç—Ä–æ–∫
                    if 'logger.info(' in line or 'logger.warning(' in line or 'logger.error(' in line:
                        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–≥–µ—Ä–∞
                        start = line.find('logger.')
                        end = line.rfind(')')
                        if start != -1 and end != -1:
                            log_content = line[start:end+1]
                            if len(log_content) > max_length - 20:  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –æ—Ç—Å—Ç—É–ø–æ–≤
                                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                                parts = log_content.split(' + ')
                                if len(parts) > 1:
                                    indent = ' ' * (line.find('logger') - 4)
                                    new_line = f"{indent}{parts[0]}\n"
                                    for part in parts[1:]:
                                        new_line += f"{indent}    + {part}\n"
                                    lines[i] = new_line.rstrip()
                                    modified = True
        
        if modified:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write('\n'.join(lines))
            print(f"‚úì –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: {file_path}")
            return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}")
    return False


def check_unused_imports(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—á–µ–≤–∏–¥–Ω—ã–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        lines = content.split('\n')
        imports = []
        used_imports = set()
        
        for line in lines:
            line = line.strip()
            if line.startswith('import ') or line.startswith('from '):
                imports.append(line)
            elif line and not line.startswith('#'):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤
                for imp in imports:
                    if 'import ' in imp:
                        module = imp.split('import ')[1].split(' as ')[0].strip()
                        if module in line and module not in used_imports:
                            used_imports.add(module)
                    elif 'from ' in imp and ' import ' in imp:
                        module = imp.split('from ')[1].split(' import ')[0].strip()
                        if module in line and module not in used_imports:
                            used_imports.add(module)
        
        # –í—ã–≤–æ–¥–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        for imp in imports:
            if 'import ' in imp:
                module = imp.split('import ')[1].split(' as ')[0].strip()
                if module not in used_imports:
                    print(f"‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∏–º–ø–æ—Ä—Ç –≤ {file_path}: {imp}")
            elif 'from ' in imp and ' import ' in imp:
                module = imp.split('from ')[1].split(' import ')[0].strip()
                if module not in used_imports:
                    print(f"‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∏–º–ø–æ—Ä—Ç –≤ {file_path}: {imp}")
                    
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ {file_path}: {e}")


def process_file(file_path):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª."""
    print(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞: {file_path}")
    
    changes = 0
    changes += add_newline_at_end(file_path)
    changes += remove_trailing_whitespace(file_path)
    changes += fix_long_lines(file_path)
    check_unused_imports(file_path)
    
    return changes


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ –∫–æ–¥–µ...")
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ Python —Ñ–∞–π–ª—ã
    python_files = []
    for root, dirs, files in os.walk('.'):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∫—ç—à
        if 'venv' in root or '__pycache__' in root or '.git' in root:
            continue
        
        for file in files:
            if file.endswith('.py'):
                python_files.append(os.path.join(root, file))
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(python_files)} Python —Ñ–∞–π–ª–æ–≤")
    
    total_changes = 0
    for file_path in python_files:
        total_changes += process_file(file_path)
    
    print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–Ω–µ—Å–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {total_changes}")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã
    create_missing_files()
    
    print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'python manage.py check' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Django")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'python manage.py test' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤")
    print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'black' –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'flake8' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∏–ª—è –∫–æ–¥–∞")
    print("5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'isort' –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤")


def create_missing_files():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã."""
    print("\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ apps/ml/tasks.py
    if not os.path.exists('apps/ml/tasks.py'):
        print("‚ö†Ô∏è  –§–∞–π–ª apps/ml/tasks.py —É–∂–µ —Å–æ–∑–¥–∞–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º apps/frontend/urls.py
    if os.path.exists('apps/frontend/urls.py'):
        with open('apps/frontend/urls.py', 'r') as f:
            content = f.read()
        if not content.strip():
            print("‚ö†Ô∏è  –§–∞–π–ª apps/frontend/urls.py –ø—É—Å—Ç–æ–π, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == '__main__':
    main()